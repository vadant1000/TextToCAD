###############################
BOLTS Specification Version 0.2
###############################

The BOLTS library consists of several different components, processes and
conventions and a number of precisely defined concepts. The purpose of this
document is to specify them.

*****************************************
Parts, Classes, Standards and Collections
*****************************************


In this section some concepts are defined, that will be used later in the
specification of blt-files_.

.. _part:

Parts
=====

A BOLTS repository_ contains a data about objects, that are in some way useful
in CAD. A part is a object that can be described by a set of dimensions. E.g. a
piece of paper is described by its width of 210mm and its height of 297mm.

.. _class:

Classes
=======

However, one often encounters parts that are very similar to each other, for
example just differing in their dimensions. These parts can then be more
efficiently described as a class of parts. To continue with the paper example,
a class describing pieces class could also contain a part with width 100mm and
height 100mm.

In blt-files_ classes of parts are described, because this case is so frequent.
Because some parts are one of a kind, it is not uncommon to have classes that
contain just a single part.

The classes of technical parts that BOLTS deals with are often specified by
standards issued by standardization bodies. blt-files_ allow to specify this
for a class.

.. _collection:

Collections
===========

It is convenient to organize the classes that we have in a bolts repository in
collections. A collection usually has one or few authors, the parts contained
are in some sense related to each other and all the data of a collection is
under the same licence.

Each collection has a one word identifier, the collection id. The collection id
is the filename (without extension) of the blt-files_ with the information about
the collection. For more details information see blt-files_.

.. _repository:

**************
The repository
**************

A BOLTS repository is directory structure with a certain layout. It contains
all the data and metadata, as well as backend specific extradata. The root
directory contains at least the "data", "drawings" and "output" directories,
plus optionally a number of backend directories. See list-of-backends_ for
details.


.. This directory layout doesn not permit to keep collections in git
   submodules, but I do not like the alternatives that would allow to. Plus I am
   not sure how useful it is to keep collections independently from each other.
   But it allows to keep backends in submodules, which might be more
   interesting, when someone maintains a backend out of tree.

The data directory
==================

The data directory contains a number of blt-files_, one for each collection_.
These files contain most of the backend independent information about the parts
in the repository.

The drawings directory
======================

The drawings directory contains a number of subdirectories, one for
each collection. In each of these directories, drawings of the parts can be
stored, that illustrate the geometries of the parts and the meaning of the
parameters.

The format of these drawings is not specified, but svg or png files are
recommended.

The output directory
====================

The distributions generated by the backends end up in subdirectories of the
output directory. Its contents should not be modified, as they get overwritten,
when the distribution is regenerated.

The backend directories
=======================

Each backend directory can contain files and directories with additional
information, which  are required by the backend. Details are specified by the
backend_.

**************************************
Backends, Processing and Distributions
**************************************

BOLTS tries to separate the backend independent data and metadata from the
backend specific data. The former is held in blt-files_, the latter in
base-files_.

.. _backend:

Backend
=======

.. _distribution:

A backend is a process that uses backend independent data and backend specific
data as input and has one or several files as output. The output is called the
distribution.

.. image:: processing.png
   :width: 100%


A example for a backend would be a process that uses the backend independent data
about parts, their geometries and dimensions together with a number of
templates and stylesheets and produces a set of HTML pages with a nicely
rendered, browsable description of the parts. Other backends could produce data
that is suitable for use in specific CAD applications.

Often backends are relatively independent and do use only their own backend
specific data. However, this is not necessarily so, a backend may also use
backend specific data of other backends. For example the HTML backend described
above might add information about how to use a part in a specific CAD
application, and this might require to access the backend specific data of the
backend for this CAD application. However, such cross backend dependencies
should be made optional, to keep every backend functional independently of other
backends.

There is a list-of-backends_, where more information about the available
backends can be found and their base-files_ are specified.


.. _blt-files:

Backend independent data - the blt file
=======================================

The backend independent data is stored in `yaml <http://yaml.org/>`_ files
with the extension .blt with exactly one YAML document and containing an
associative array with the following keys:

- collection: mandatory. The collection-header_
- classes: mandatory. An list of class-element_ as values. 

The filename without the .blt extension is called the collection id. Collection
ids are one word identifiers, which must be unique within the repository. This
class id is used as a way to refer to the class, when the standard field is not
set.  They should contain only letters, numbers and underscores, and should be
descriptive, as they may be visible to the user. Some names can not be
collection ids: common, gui, template

.. _collection-header:

Collection header
-----------------

The collection header is an associative array that holds general information
regarding the collection_. It contains the following keys:

- name: optional, string. A name for the collection.
- description: optional, string. A description of the contents of this
  collection.
- author: mandatory, string or list of strings. The author of this collection
  with e-mail in <>. If multiple authors contributed significantly to this collection
  a list of authors may be given.
- license: mandatory, string. The name of the license for this collection and a
  URL pointing to the full text of the license enclosed in <>. Must be one of
  the supported-licenses_.
- blt-version: mandatory, number. The version of the blt format this collection
  follows.

.. _class-element:

Class element
-------------

A class element is an associative array that holds information about a
class_. It has the following keys:

- id: mandatory, string. The id of the class. Class ids are one word
  identifiers, which must be unique within the repository. This class id is
  used as a way to refer to the class, when the standard field is not set.
  They should contain only letters, numbers and underscores, and should be
  descriptive, as they may be visible to the user.
- naming: mandatory, naming-element_. A naming convention for the parts of this
  class.
- drawing: optional, string. Filename of a drawing for this class.
- description: optional, string. A short description of the class.
- standard: optional, string or list of strings. The name of the standard, if
  class is standardized. In the case of several identical standards, a list of
  names can be given.
- status: optional, string. This can be used to indicate the status of the
  standard.  Possible values are "active" and "withdrawn", if absent, "active"
  is assumed.
- replaces: optional, string or list of strings. Standards that are superseded
  by this standard.
- parameters: optional, parameter-element_: Parameters for this class.
- url: optional, string or list of strings. A url with relevant information
  regarding the parts of this class. For example a link to a vendor, or to the
  specifying standard.  In the case of several identical standards, a list of
  urls has to be given.
- notes: optional, string. Notes for this class. Can be used to formulate
  questions or additional information.
- source: mandatory, string. A short description where the information for this
  class originate. Should contain a URL if possible.

.. _parameter-element:

Parameter element
-----------------

A parameter element is an associative array that holds information about the
parameters of a part. This information is used when doing
parameter-collection_. Parameters are usually dimensions, but are not
restricted to be. The following keys are contained in a parameter element.

- literal: optional, associative array. This array has as its key the parameter
  names of the literal parameters, as values the corresponding values. Literal
  parameters are rarely used.
- free: optional, list. This list contains the names of the parameters that are
  not assigned a value. Usually the user will provide this value.
- tables: optional, table-element_ or list of table-elements. This array
  contains tabular data. Often the table index will be a free variable, for
  details see table-element_ and parameter-collection_.
- types: optional, associative array. Contains as keys parameter names, as
  values their respective types. Possible types are: "Length (mm)", Length
  (in)", "Number", "Bool", "Table Index", "String". If no entry is present for
  a parameter, "Length (mm)" is assumed.
- defaults: optional, associative array. This array contains a default value
  for every free parameter. If absent, the default value defaults to the type
  specific values given in the table below.

============  ==============
Type          Default Value
============  ==============
Length (mm)   10
Length (in)   1
Number        1
Bool          False
Table Index   ""
String        ""
============  ==============

Some parameter names are forbidden: standard.

The two values of the type Bool are true and false (lowercase).

.. Limits on parameters could go here

.. _table-element:

Table element
-------------

Tables of data are very common in standards and very useful for specifying a
class_ of parts. A table element describes a table of values, where the row is
specified by the value an index parameter, and each column contains the value
for a parameter. A table element is an associative array that has the following
keys:

- index: mandatory, string: name of the index parameter. Has to specified to be
  of type "Table Index" in the parameter-element_.
- columns: mandatory, list: list of parameter names corresponding to the
  columns of the table.
- data: mandatory, associative array: The keys are possible values of the index
  parameter, the values list of values compatible with the types of the
  parameters specified in columns.

.. _naming-element:

Naming element
--------------

The name of a part should be precise enough to completely describe it, and
therefore depends on the values of (some of) the parameters. A naming element is
an associative array that holds information about the name of the parts of a
class. It has the keys:

- template: mandatory, string. A name template, can contain placeholders for
  strings "%s" and numbers "s".
- substitute: optional, list. List of parameter names and that should be
  filled in for the placeholders in the template. If missing defaults to empty
  list. Besides the parameter names from the parameter-element_, also the
  special name "standard" can be used.


.. _parameter-collection:

Parameter Collection
====================

Parameter Collection is the process of assigning a value to each parameter. The
set of all parameters is found by collecting parameter names from the fields of
one or more parameter-element_:

- The keys of the literal field.
- The items of the free field.
- The index field of the table-element_ s in the tables field.
- The columns field of the table-element_ s in the tables field.

It is an error condition if there is a parameter name present as a key in the
types field, that is not in the set of all parameters.

Then a value is assigned to each parameter. This can happen by:

- A literal value given in the literal field
- User or external input for parameters listed in the free field
- Table lookup for parameters listed in the columns field of a table-element_

It is an error condition if a parameter is not assigned a value or if there are
more than one way to assign a value.

For example are the parameter values collected in this way used (among other
properties) to populate the template given in the naming-element_.


.. _base-files:

Base Files
==========

Base files are `yaml <http://yaml.org/>`_ files, that store backend specific
data about additional files for a collection. They consist of a list of
base-file-element_, one for each file they describe.

.. _base-file-element:

Base file element
-----------------

A base file element is an associative array containing information about a
file. Depending on the type of the file the contained keys are different.
However, there are some keys that are present in every base file element:

- filename: mandatory, string. The filename of the file
- author: mandatory, string or list of strings. The author of the file with
  e-mail address in <> or a list of several authors.
- license: mandatory, string. The license of the file. Must be one of the
  supported-licenses_.
- type: mandatory, string. A string describing the type of the file.
- source: optional, string. A string describing the origin of the file.

Backends support different base-file-types, for a list see list-of-base-file-types_.

.. _list-of-backends:

################
List of Backends
################

********
OpenSCAD
********

The files containing information required by the OpenSCAD backend reside in
the backend directory with the name openscad. This backend directory contains a
folder for each collection_ that contains files related to this collection, and
the folder is named like the collection-id.

The OpenSCAD backend generates a OpenSCAD library with modules for all parts
from the collections.

To be able to do that it needs information about base modules, which are
stored in the base-files_ of a collection. Base modules are openscad modules
that take as parameters a subset of all  the parameters of the part (see
parameter-collection_), and construct the part according to these dimensions.

These modules are stored in one or several files residing in the respective
collection directory within the openscad backend directory, and the base-files_
contains one base-file-element_ of type "modules" (see base-file-type-module_) for
each file with modules.

Common files that contain code that is used in several collections or base
files can be placed in a folder called common in the openscad backend
directory. They will be automatically included into the main file and copied to
the distribution.


*******
FreeCAD
*******


.. _list-of-base-file-types:

#######################
List of base file types
#######################

.. _base-file-type-module:

******
Module
******

This kind of base-file-element_ describes a file containing OpenSCAD modules.
It is an associative array that contains the following keys:

- filename: mandatory, string. The filename of the file
- author: mandatory, string or list of strings. The author of the file with
  e-mail address in <> or a list of several authors.
- license: mandatory, string. The license of the file. Must be one of the
  supported-licenses_
- type: "module"
- modules: mandatory, list of base-module-element_. A list of base module
  elements describing the modules in the file.


.. _base-module-element:


Base module element
===================

A base module element is a associative array describing an OpenSCAD module with
the following keys:

- name: mandatory, string. The name of the module.
- arguments: mandatory, list of strings. A list with the arguments that need to
  be supplied to the module, in the correct order.  Is a subset of the
  parameters of the class, see parameter-collection_.
- classids: mandatory, list of string. A list of class ids for which this base
  module should be used.
- parameters: optional, parameter-element_: Additional basespecific parameters.
  These parameters allow to represent additional parameters, which are not
  specific to the class, but to the base. This allows e.g. to let the user
  choose  between a detailed and a schematic representation of the part.

.. _base-file-type-stl:

***
STL
***

This kind of base-file-element_ describes a file containing geometrical data in
the STL format. It is an associative array with the following keys:

- filename: mandatory, string. The filename of the file
- author: mandatory, string or list of strings. The author of the file with
  e-mail address in <> or a list of several authors.
- license: mandatory, string. The license of the file. Must be either "CC0
  1.0" or "Public Domain".
- type: "stl"
- classids: mandatory, list of string. A list of class ids for which this base
  module should be used.

.. _base-file-type-function:

********
Function
********
This kind of base-file-element_ describes a python file containing geometrical
data in form of functions that build a part in a FreeCAD Document. It is an
associative array with the following keys:

- filename: mandatory, string. The filename of the file
- author: mandatory, string or list of strings. The author of the file with
  e-mail address in <> or a list of several authors.
- license: mandatory, string. The license of the file. Must be one of the
  supported-licenses_.
- type: "function"
- functions: mandatory, list of base-function-element_.

.. _base-function-element:

Base function element
=====================

A base function element is a associative array describing a python function
with the following keys:

- name: mandatory, string. The name of the function.
- classids: mandatory, list of string. A list of class ids for which this base
  module should be used.
- parameters: optional, parameter-element_: Additional basespecific parameters.
  These parameters allow to represent additional parameters, which are not
  specific to the class, but to the base. This allows e.g. to let the user
  choose  between a detailed and a schematic representation of the part.

.. _base-file-type-fcstd:

*****
FCSTD
*****

This kind of base-file-element_ describes a file created with FreeCAD. It is an
associative array with the following keys:

- filename: mandatory, string. The filename of the file
- author: mandatory, string or list of strings. The author of the file with
  e-mail address in <> or a list of several authors.
- license: mandatory, string. The license of the file. Must be "CC0 1.0" or
  "Public Domain".
- type: "fcstd"
- objects: mandatory, list of base-object-element_.

.. _base-object-element:

Base object element
===================

A base object element is an associative array describing an object in a FreeCAD
Document. It has the following keys:

- objectname: mandatory, string. The name of the part in the document.
- classids: mandatory, list of string. A list of class ids for which this base
  part should be used.
- parameters: optional, parameter-element_: Additional basespecific parameters.
  These parameters allow to represent additional parameters, which are not
  specific to the class, but to the base. This allows e.g. to let the user
  choose  between a detailed and a schematic representation of the part.
- proptoparam: optional, associative array of associative arrays. This maps
  properties of objects to parameters. Keys to the first level of associative
  arrays are the object names in the source file, keys to the second level are
  the names of the properties and the values are the names of the parameter as
  specified in a parameter-element_. Defaults to {objectname : {"Label" :
  "name"}}


.. _supported-licenses:

###########################
Supported Licenses in BOLTS
###########################

The license of a file contained in BOLTS must be one of the following:

* `CC0 1.0 <http://creativecommons.org/publicdomain/zero/1.0/>`_
* `Public Domain <http://jreinhardt.github.io/BOLTS/public_domain.html>`_
* `MIT <http://opensource.org/licenses/MIT>`_
* `BSD 3-clause <http://opensource.org/licenses/BSD-3-Clause>`_
* `Apache 2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_
* `LGPL 2.1 <http://www.gnu.org/licenses/lgpl-2.1>`_
* `LGPL 2.1+ <http://www.gnu.org/licenses/lgpl-2.1>`_
* `LGPL 3.0 <http://www.gnu.org/licenses/lgpl-3.0>`_
* `LGPL 3.0+ <http://www.gnu.org/licenses/lgpl-3.0>`_
* `GPL 2.0+ <http://www.gnu.org/licenses/gpl-2.0>`_
* `GPL 3.0 <http://www.gnu.org/licenses/gpl-3.0>`_
* `GPL 3.0+ <http://www.gnu.org/licenses/gpl-3.0>`_

where a + indicates a clause that allows a later version of the license to be
used.

